created: 20230524140433277
creator: oeyoews
modified: 20230524140620963
modifier: oeyoews
tags: 
title: three-pig
type: text/markdown

# 三只小猪

## 题目背景

你听说过三只小猪的故事吗？这是一个经典的故事。很久很久以前，有三只小猪。第一只小猪用稻草建的房子，第二个小猪用木棍建的房子，第三个小猪则使用砖做为材料。一只大灰狼想吃掉它们并吹倒了稻草和木棍建的房子。但是砖盖的房子很结实，狼最终也没有破坏掉，最后小猪们战胜了大灰狼并把它尾巴烧掉了。

## 题目描述

为了自己的安全，小猪们又建造了一个新砖房。但是现在问题出现了，怎样把三个小猪分配到两个房子里呢？第三只小猪是三只小猪中最聪明的一只，为了不浪费任何一个房子，它总共考虑了三种方案，如下图

 ![](https://cdn.luogu.com.cn/upload/pic/6862.png) 

“但是将来怎么办呢？”第三只小猪知道将来随着成员的增多，它们将会盖更多的房子。它想知道给定了房子和猪的数目后，房子的分配方案有多少，但这个问题对于它来说，很明显有点难了，你能帮小猪解决这个问题吗？

## 输入格式

输入文件piggy.in，仅有一行，包含两个整数n和m，分别表示小猪的数目和房间数（1≤n≤50，0≤m≤50）。

## 输出格式

输出文件piggy.out，仅一个整数，表示将n只小猪安置在m个房间且没有房间空闲的方案数。

## 样例 #1

### 样例输入 #1

```
4 2
```

### 样例输出 #1

```
7
```

## 样例 #2

### 样例输入 #2

```
6 7
```

### 样例输出 #2

```
0
```

## Python 实现

```python
def work(n, m):
    # 初始化一个二维数组，用于记录每种情况下放球的方案数
    f = [[0 for i in range(300)] for i in range(300)]
    
    # 对于只有一个盒子的情况，放置 n 个球只有一种方案
    for i in range(1, n + 1):
        f[i][1] = 1
    
    # 对于多个盒子的情况，使用动态规划求解
    for i in range(2, n + 1):
        for j in range(2, m + 1):
            # 状态转移方程：f[i][j] = f[i - 1][j - 1] + j * f[i - 1][j]
            # 左边的表达式表示 i 个球放到 j 个盒子中的方案数
            # 右边第一部分 f[i - 1][j - 1] 表示将 i-1 个球放在 j-1 个盒子里再加上第 i 个球单独放到一个新盒子中的方案数
            # 右边第二部分 j * f[i - 1][j] 表示将第 i 个球放到 j 个盒子中的方案，即前 i-1 个球任意放在 j 个盒子中（共有 f[i - 1][j] 种情况），再将第 i 个球放入任意一个盒子（共有 j 种情况）
            f[i][j] = f[i - 1][j - 1] + j * f[i - 1][j]
    
    # 返回放置 n 个球到 m 个盒子中的方案数
    return f[n][m]


def main():
    # 从控制台读取两个字符串参数，并转换为整型
    s = input().split()
    n, m = int(s[0]), int(s[1])
    
    # 调用 work 函数计算结果并输出到控制台
    print(work(n, m))

# 程序入口
if __name__ == '__main__':
    main()
```

函数 work(n, m) 通过动态规划求解出将 n 个球放入 m 个盒子中的方案数。具体地，使用 f[i][j] 表示将 i 个不同的球放入 j 个不同的盒子中，每个盒子至少有一个球的方案数。

对于只有一个盒子的情况，显然有将 n 个球全部放入这一个盒子的方案，而其他情况可以使用递推计算。具体的，对于 f[i][j]，需要从 f[i-1][j-1] 和 f[i-1][j] 中计算得到，其中 f[i-1][j-1] 表示将 i-1 个球放在 j-1 个盒子里再加上第 i 个球单独放到一个新盒子中的方案数；f[i-1][j] 表示前 i-1 个球任意放在 j 个盒子中的方案数，再将第 i 个球放入任意一个盒子中（共有 j 种情况）。

在主函数 main() 中，从控制台读取两个字符串参数，并转换为整型，然后调用 work 函数计算结果并输出到控制台。