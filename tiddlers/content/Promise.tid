created: 20230523022237539
creator: oeyoews
modified: 20230523022323734
modifier: oeyoews
tags: ES6
title: Promise
type: text/markdown

Promise 是 JavaScript 中一种用于异步编程的解决方案。它是 ECMAScript 6 标准中新增的特性之一，可以使异步操作更加简洁和易于理解。

Promise 可以看作是一个容器，其中保存着异步操作的结果。它有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。当异步操作完成后，Promise 会从 pending 状态转变为 fulfilled 或 rejected 状态，表示异步操作的结果已经确定。

Promise 具有以下特点：

1. Promise 对象是一个构造函数，可以使用 new 关键字创建实例。
2. Promise 实例接受一个函数作为参数，该函数被称为 executor，用于执行异步操作。
3. Promise 实例具有 then 方法，可以在异步操作成功或失败时执行回调函数。
4. then 方法返回一个新的 Promise 对象，可以链式调用。
5. Promise 可以通过 catch 方法捕获异步操作的错误。
6. Promise 可以使用 all 和 race 方法，分别表示并行执行多个异步操作和只取最先完成的异步操作结果。

Promise 的优点在于它简化了异步代码的编写和理解，使代码更加清晰和易于维护。同时，Promise 也提供了一种标准的接口，可以方便地与其他异步 API 集成。

以下是一个使用 Promise 实现异步操作的示例：

```javascript
// 假设有一个异步函数 fetchData，用于获取数据
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = { name: 'John', age: 30 };
      resolve(data); // 模拟异步操作成功
      // reject('Error: data not found'); // 模拟异步操作失败
    }, 2000);
  });
}

// 调用 fetchData 函数获取数据，并在成功时输出数据，失败时输出错误信息
fetchData()
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error(error);
  });
```

上面的代码中，我们使用 Promise 封装了一个异步函数 `fetchData`，该函数返回一个 Promise 实例。在 `fetchData` 函数中，我们使用 `setTimeout` 模拟了一个异步操作，2 秒后返回数据。

然后我们调用 `fetchData` 函数，并在成功时使用 `then` 方法输出数据，失败时使用 `catch` 方法输出错误信息。在 `then` 方法中，我们可以获取到异步操作的结果，即 `data` 对象。如果异步操作失败，`catch` 方法会捕获错误信息并输出。

需要注意的是，`then` 方法返回一个新的 Promise 对象，可以链式调用。如果在 `then` 方法中返回了一个值或抛出了一个异常，这个值或异常会被传递到下一个 `then` 方法或 `catch` 方法。如果有多个异步操作需要执行，可以使用 `Promise.all` 方法并行执行这些操作，等待所有操作完成后再进行下一步操作。