{"tiddlers":{"$:/plugins/dullroar/atomfeed/atom.template.xml":{"title":"$:/plugins/dullroar/atomfeed/atom.template.xml","type":"text/vnd.tiddlywiki","text":"<$set name=\"exportFilter\" value={{$:/config/atomfilter}}>{{$:/plugins/dullroar/atomfeed/atomexport}}</$set>\n"},"$:/plugins/dullroar/atomfeed/atomexport":{"title":"$:/plugins/dullroar/atomfeed/atomexport","description":"Atom Feed","tags":"$:/tags/Exporter","type":"text/vnd.tiddlywiki-html","extension":".xml","text":"\\define renderContent()\n<$text text=<<atomtiddlers filter:\"\"\"$(exportFilter)$\"\"\">>/>\n\\end\n<<renderContent>>\n"},"$:/plugins/dullroar/atomfeed/Feed-icon.svg":{"title":"$:/plugins/dullroar/atomfeed/Feed-icon.svg","created":"20141221214704535","creator":"Jim","modified":"20141221220222900","modifier":"Jim","tags":"static","type":"image/svg+xml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"128px\" height=\"128px\" id=\"RSSicon\" viewBox=\"0 0 256 256\">\n<defs>\n<linearGradient x1=\"0.085\" y1=\"0.085\" x2=\"0.915\" y2=\"0.915\" id=\"RSSg\">\n<stop offset=\"0.0\" stop-color=\"#E3702D\"/><stop offset=\"0.1071\" stop-color=\"#EA7D31\"/>\n<stop offset=\"0.3503\" stop-color=\"#F69537\"/><stop offset=\"0.5\" stop-color=\"#FB9E3A\"/>\n<stop offset=\"0.7016\" stop-color=\"#EA7C31\"/><stop offset=\"0.8866\" stop-color=\"#DE642B\"/>\n<stop offset=\"1.0\" stop-color=\"#D95B29\"/>\n</linearGradient>\n</defs>\n<rect width=\"256\" height=\"256\" rx=\"55\" ry=\"55\" x=\"0\" y=\"0\" fill=\"#CC5D15\"/>\n<rect width=\"246\" height=\"246\" rx=\"50\" ry=\"50\" x=\"5\" y=\"5\" fill=\"#F49C52\"/>\n<rect width=\"236\" height=\"236\" rx=\"47\" ry=\"47\" x=\"10\" y=\"10\" fill=\"url(#RSSg)\"/>\n<circle cx=\"68\" cy=\"189\" r=\"24\" fill=\"#FFF\"/>\n<path d=\"M160 213h-34a82 82 0 0 0 -82 -82v-34a116 116 0 0 1 116 116z\" fill=\"#FFF\"/>\n<path d=\"M184 213A140 140 0 0 0 44 73 V 38a175 175 0 0 1 175 175z\" fill=\"#FFF\"/>\n</svg>\n"},"$:/plugins/dullroar/atomfeed/atomsmasher.js":{"title":"$:/plugins/dullroar/atomfeed/atomsmasher.js","text":"/*\\\ntitle: $:/plugins/dullroar/atomfeed/atomsmasher.js\ntype: application/javascript\nmodule-type: library\n\nEncapsulating class for constructing atom feeds\n\n\\*/\n\n/**\n * @module Atomfeed\n */\n(function() { // jshint ignore:line\n  var uuidHasher = require('$:/plugins/dullroar/atomfeed/md5hashToGuid');\n\n  // jshint ignore:start\n  var LAST_UPDATED_FILTER =\n    '[!is[system]!has[draft.of]!untagged[]!tag[static]!is[tag]!sort[modified]limit[1]]';\n  // jshint ignore:end\n\n  function toISODate(twDateString) {\n    if (!twDateString) { return ''; }\n    var twDate = $tw.utils.parseDate(twDateString);\n    return $tw.utils.formatDateString(twDate, \"YYYY-0MM-0DDT0hh:0mm:0ss\");\n  }\n\n  function pathJoin(parts){\n    return parts.join('/').replace(/(:\\/)*\\/{1,}/g, '$1/');\n  }\n\n  function domBuilderToXml(domBuilder) {\n    var _htmlVoidElements = $tw.config.htmlVoidElements;\n    $tw.config.htmlVoidElements = [];\n    var output = domBuilder.toString();\n    $tw.config.htmlVoidElements = _htmlVoidElements;\n    return output;\n  }\n\n  function toPermalink(title) {\n    return '#' + encodeURIComponent(title);\n  }\n\n  function toFileName(title) {\n    return encodeURIComponent(encodeURIComponent(title)) + '.html';\n  }\n\n  /**\n   * Manage the creation and stringification of a list of tiddler titles.\n   *\n   * @class AtomSmasher\n   * @constructor\n   * @param {Object} options hash of options to provide context\n   * @param {Wiki} options.wiki the $tw.wiki instance\n   * @param {DOMDocument} [options.document=window.document] pass in a fake DOM\n   * when `$tw.browser` is false (running in Node.JS)\n   * @public\n   */\n  function AtomSmasher(options) {\n    this.wiki = options.wiki;\n    this.document = options.document || window.document;\n    this.metadata = this.lookupMetadata();\n  }\n\n  /**\n   * Lookup site information for caching\n   * @method lookupMetadata\n   * @return {Object} hash of metadata\n   * @private\n   */\n  AtomSmasher.prototype.lookupMetadata = function lookupMetadata() {\n    var atomserver = this.wiki.getTiddlerText('$:/config/atomserver');\n    var lastUpdatedTiddler =\n      this.wiki.getTiddler(this.wiki.filterTiddlers(LAST_UPDATED_FILTER)[0]);\n    var sitetitle = this.wiki.getTiddlerText('$:/SiteTitle');\n    return {\n      title:    sitetitle,\n      subtitle: this.wiki.getTiddlerText('$:/SiteSubtitle'),\n      feedhref: pathJoin([atomserver, 'atom.xml']),\n      sitehref: atomserver,\n      author:   lastUpdatedTiddler.fields.creator,\n      updated:  toISODate(lastUpdatedTiddler.fields.modified),\n      uuid:     uuidHasher.run(sitetitle),\n    };\n  };\n\n  /**\n   * Lookup tiddler information for building an atom entry.\n   * @method lookupMetadata\n   * @return {Object} hash of data\n   * @private\n   */\n  AtomSmasher.prototype.lookupEntryData = function lookupEntryData(tiddler) {\n    var title = tiddler.getFieldString('title');\n    return {\n      title: title,\n      updated: toISODate(tiddler.getFieldString('modified')),\n      uuid: uuidHasher.run(title),\n      href: pathJoin([this.metadata.sitehref, toPermalink(title)]),\n      statichref: pathJoin([\n        this.metadata.sitehref, 'static', toFileName(title)\n      ]),\n      summary: tiddler.getFieldString('summary'),\n      author: tiddler.getFieldString('modifier') ||\n        tiddler.getFieldString('creator') ||\n        this.metadata.author\n    };\n  };\n\n  /**\n   * Return a DomBuilder for the ATOM feed with headers.\n   *\n   * @method atomFeed\n   * @return {DomBuilder}\n   * @private\n   */\n  AtomSmasher.prototype.atomFeed = function atomHeader() {\n    return $tw.utils.DomBuilder('feed', this.document)\n      .attr('xmlns', 'http://www.w3.org/2005/Atom')\n      .add('title').renderText(this.metadata.title).end()\n      .add('subtitle').renderText(this.metadata.subtitle).end()\n      .add('link')\n        .attr('href', this.metadata.feedhref)\n        .attr('rel', 'self')\n      .end()\n      .add('link')\n        .attr('href', this.metadata.sitehref)\n      .end()\n      .add('author')\n        .add('name')\n          .text(this.metadata.author)\n        .end()\n      .end()\n      .add('id').text(this.metadata.uuid).end()\n      .add('updated').text(this.metadata.updated).end();\n  };\n\n  /**\n   * Return a DomBuilder for a specific ATOM entry from a Tiddler.\n   *\n   * @method atomEntry\n   * @param {Tiddler} tiddler the tiddler to use to create the ATOM entry\n   * @return {DomBuilder}\n   * @private\n   */\n  AtomSmasher.prototype.atomEntry = function atomEntry(tiddler) {\n    var data = this.lookupEntryData(tiddler);\n    return $tw.utils.DomBuilder('entry', this.document)\n      .add('title').text(data.title).end()\n      .add('link')\n        .attr('href', data.href)\n      .end()\n      .add('link')\n        .attr('rel', 'alternative')\n        .attr('type', 'text/html')\n        .attr('href', data.statichref)\n      .end()\n      .add('id').text(data.uuid).end()\n      .add('updated').text(data.updated).end()\n      .bind(function() {\n        if (data.summary) {\n          this.add('summary').text(data.summary);\n        }\n      })\n      .add('content')\n        .attr('type', 'xhtml')\n        .renderTiddler(data.title)\n          .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n        .end()\n      .end()\n      .add('author')\n        .add('name').text(data.author).end()\n      .end();\n  };\n\n  /**\n   * Construct and stringify the list of tiddler titles.\n   *\n   * @method feedify\n   * @param {Array} titles the list of tiddlers to process\n   * @return {String} the XML of a feed file as a String\n   * @public\n   */\n  AtomSmasher.prototype.feedify = function feedify(titles) {\n    var feed = this.atomFeed();\n    titles.forEach(function(title) {\n      feed.add(this.atomEntry(this.wiki.getTiddler(title)));\n    }, this);\n    return '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + domBuilderToXml(feed);\n  };\n\n  module.exports = AtomSmasher;\n})();\n","type":"application/javascript","module-type":"library"},"$:/plugins/dullroar/atomfeed/atomtiddlers.js":{"title":"$:/plugins/dullroar/atomfeed/atomtiddlers.js","text":"/*\\\ntitle: $:/plugins/dullroar/atomfeed/atomtiddlers.js\ntype: application/javascript\nmodule-type: macro\n\nMacro to output tiddlers matching a filter to JSON\n\n\\*/\n\n/*jshint node: true, browser: true */\n/*global $tw: false */\n(function() {\n  var AtomSmasher = require('$:/plugins/dullroar/atomfeed/atomsmasher');\n\n  exports.name = 'atomtiddlers';\n\n  exports.params = [\n    {\n      name: 'filter',\n      default: '[!is[system]!has[draft.of]!sort[modified]]'\n    }\n  ];\n\n  exports.run = function(filter) {\n    return new AtomSmasher({wiki: this.wiki, document: this.document})\n      .feedify(this.wiki.filterTiddlers(filter));\n  };\n})();\n","type":"application/javascript","module-type":"macro"},"$:/plugins/dullroar/atomfeed/config":{"title":"$:/plugins/dullroar/atomfeed/config","tags":"$:/tags/ControlPanel/Info","caption":"Atom Feeds","text":"|Canonical feed URL |<$edit-text tiddler=\"$:/config/atomserver\" tag=\"input\"/><br>//Base URL path with out the trailing `/atom.xml`// |\n|Included Tiddlers |<$edit-text tiddler=\"$:/config/atomfilter\" default=\"\" tag=\"textarea\"/><br>//Filter for the content in the feed. Remember ordering is important! Or you can choose the <$button set=\"$:/config/atomfilter\" setTo=\"[!is[system]!untagged[]!tag[static]!title[Table of Contents]!sort[modifed]]\">default filter</$button>// |\n"},"$:/plugins/dullroar/atomfeed/dombuilder.js":{"title":"$:/plugins/dullroar/atomfeed/dombuilder.js","text":"/*\\\ntitle: $:/plugins/dullroar/atomfeed/dombuilder.js\ntype: application/javascript\nmodule-type: library\n\nMicro DSL for DOM creation and stringification.\n\n\\*/\n\n/**\n * @module Atomfeed\n * @author Devin Weaver\n */\n/*jshint node: true, browser: true */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.DomBuilder = factory();\n  }\n})(this, function() {\n  /**\n   * Helper utility to construct complex DOM nodes easily.\n   *\n   * @class DomBuilder\n   * @constructor\n   * @param {DomBuilder|DOMElement|String} [root=div] A DOM element or string.\n   * If `root` is a DomBuilder it will become `root` instead\n   * @param {DOMDocument} [document=window.document] the document object used\n   * to create elements\n   * @public\n   */\n  function DomBuilder(root, document) {\n    if (root instanceof DomBuilder) {\n      return root;\n    }\n    if (!(this instanceof DomBuilder)) {\n      return new DomBuilder(root, document);\n    }\n    this.document   = document || window.document;\n    this.tag        = root || 'div';\n    this.elements   = [];\n    this.attributes = {};\n    this.namespace  = null;\n    this.parent     = null;\n  }\n\n  DomBuilder.prototype._addElement = function(element) {\n    var el = new DomBuilder(element, this.document);\n    el.parent = this;\n    this.elements.push(el);\n    return el;\n  };\n\n  /**\n   * @method add\n   * @param {DomBuilder|DOMElement|String} element the element to add to this\n   * DomBuilders elements list\n   * @return {DomBuilder} the new child element (DomBuilder) unless `element`\n   * is a DomBuilder in which case `this` is returned\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.add = function add(element) {\n    var el = this._addElement(element);\n    return (element instanceof DomBuilder) ? this : el;\n  };\n\n  /**\n   * @method text\n   * @param {String} the text to append\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.text = function text(content) {\n    var node = this.document.createTextNode(content);\n    this._addElement(node);\n    return this;\n  };\n\n  /**\n   * @method attr\n   * @param {String} name the attribute name\n   * @param {String} value the attribute value\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.attr = function attr(name, value) {\n    this.attributes[name] = $tw.utils.htmlEncode(value);\n    return this;\n  };\n\n  /**\n   * @method end\n   * @return {DomBuilder} the parent DomBuilder in the hierarchy\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.end = function end() {\n    return this.parent || this;\n  };\n\n  /**\n   * Execute a callback and add it's result to the chain.\n   *\n   * Within the callback you can use `this` as if the chain was continuing\n   * inside. However, the return vaue is ignorred and the DomBuilder that\n   * `bind` was called on will be returned meaning `end()` wil not need to end\n   * this node.\n   *\n   * @method bind\n   * @param {Function} callback called with `this` as the current DomBuilder\n   * node. Return value is ignored.\n   * @return {DomBuilder} this DomBuilder in the hierarchy `.end()` not needed.\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.bind = function bind(callback) {\n    callback.call(this);\n    return this;\n  };\n\n  /**\n   * @method toDOM\n   * @param {DOMDocument} [document=this.document] the document object to\n   * propagate down the recursion chain\n   * @return {DOMElement} the compiled DOMElement with its child hierarchy\n   * @public\n   */\n  DomBuilder.prototype.toDOM = function toDOM(document) {\n    var node, name;\n    document = document || this.document;\n    if (typeof this.tag === 'string') {\n      node = (this.namespace) ?\n        document.createElementNS(this.namespace, this.tag) :\n        document.createElement(this.tag);\n    } else {\n      node = this.tag;\n    }\n    for (name in this.attributes) {\n      node.setAttribute(name, this.attributes[name]);\n    }\n    this.elements.forEach(function(element) {\n      node.appendChild(element.toDOM(document));\n    });\n    return node;\n  };\n\n  /**\n   * @method toString\n   * @return {String} the HTML for this DomBuilder's hierarchy\n   * @public\n   */\n  DomBuilder.prototype.toString = function toString() {\n    return this.toDOM().outerHTML;\n  };\n\n  /**\n   * The tag (or DOMElement) for this node.\n   * @property tag\n   * @type {String|DOMElement}\n   * @default div\n   * @private\n   */\n\n  /**\n   * List of child elements for this DomBuilders hierarchy level.\n   * @property elements\n   * @type {Array}\n   * @private\n   */\n\n  /**\n   * List of attributes to apply to this DOMElement.\n   * @property attributes\n   * @type {Object}\n   * @private\n   */\n\n  /**\n   * The namespace for this DOMElement.\n   * @property namespace\n   * @type {String}\n   * @default null\n   * @private\n   */\n\n  /**\n   * The parent DomBuilder in the hierarchy.\n   * @property parent\n   * @type {DomBuilder}\n   * @default null\n   * @private\n   */\n\n  return DomBuilder;\n});\n","type":"application/javascript","module-type":"library"},"$:/plugins/dullroar/atomfeed/md5.js":{"title":"$:/plugins/dullroar/atomfeed/md5.js","text":"/*\\\ncreated: 20141228181400000\ncreator: Jim\nmodified: 20160426001400000\nmodifier: Sukima\nmodule-type: library\ntitle: $:/plugins/dullroar/atomfeed/md5.js\ntype: application/javascript\n\nMD5 hash function by James Taylor [@jbt], https://github.com/jbt/js-crypto.\n\n\\*/\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.hash = function(){\n\n  var k = [], i = 0;\n\n  for(; i < 64; ){\n    k[i] = 0|(Math.abs(Math.sin(++i)) * 4294967296);\n  }\n\n  function calcMD5(str){\n    var b, c, d, j,\n        x = [],\n        str2 = unescape(encodeURI(str)),\n        a = str2.length,\n        h = [b = 1732584193, c = -271733879, ~b, ~c],\n        i = 0;\n\n    for(; i <= a; ) x[i >> 2] |= (str2.charCodeAt(i)||128) << 8 * (i++ % 4);\n\n    x[str = (a + 8 >> 6) * 16 + 14] = a * 8;\n    i = 0;\n\n    for(; i < str; i += 16){\n      a = h; j = 0;\n      for(; j < 64; ){\n        a = [\n          d = a[3],\n          ((b = a[1]|0) +\n            ((d = (\n              (a[0] +\n                [\n                  b & (c = a[2]) | ~b&d,\n                  d & b | ~d & c,\n                  b ^ c ^ d,\n                  c ^ (b | ~d)\n                ][a = j >> 4]\n              ) +\n              (k[j] +\n                (x[[\n                  j,\n                  5 * j + 1,\n                  3 * j + 5,\n                  7 * j\n                ][a] % 16 + i]|0)\n              )\n            )) << (a = [\n              7, 12, 17, 22,\n              5,  9, 14, 20,\n              4, 11, 16, 23,\n              6, 10, 15, 21\n            ][4 * a + j++ % 4]) | d >>> 32 - a)\n          ),\n          b,\n          c\n        ];\n      }\n      for(j = 4; j; ) h[--j] = h[j] + a[j];\n    }\n\n    str = '';\n    for(; j < 32; ) str += ((h[j >> 3] >> ((1 ^ j++ & 7) * 4)) & 15).toString(16);\n\n    return str;\n  }\n  return calcMD5;\n}();\n","created":"20141228181400000","creator":"Jim","modified":"20160426001400000","modifier":"Sukima","module-type":"library","type":"application/javascript"},"$:/plugins/dullroar/atomfeed/md5hashToGuid.js":{"title":"$:/plugins/dullroar/atomfeed/md5hashToGuid.js","text":"/*\\\ncreated: 20141229142330769\ncreator: Jim\nmodified: 20160426001500000\nmodifier: Sukima\nmodule-type: macro\ntags: \ntitle: $:/plugins/dullroar/atomfeed/md5hashToGuid.js\ntype: application/javascript\n\nMacro to create an MD5 hash of a string and format it as a GUID.\n\n\\*/\nvar md5 = require(\"$:/plugins/dullroar/atomfeed/md5\");\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n \nexports.name = \"md5hashToGuid\";\n\nexports.params = [\n\t{name: \"input\"}\n];\n\n/*\nRun the macro.\n*/\nexports.run = function(input) {\n    if(!input) {\n        return \"\";\n    }\n    var md5hash = md5.hash(input);\n    // This is a special use case where we use the 128 bits conveniently returned by a MD5\n    // hash and format it as a pseudo-GUID for use in things like an ATOM feed id field.\n    // The idea being MD5 should have no collisions on tiddler titles, and yet will always\n    // return the same hash for the same title string, which then gives us the persistent\n    // id semantics that the ATOM spec requires. Other crypto hashes like SHA return too\n    // many bits for this.\n    return md5hash.substring(0,8) + \"-\" + md5hash.substring(8,12) + \"-\" + md5hash.substring(12,16) + \"-\" + md5hash.substring(16,20) + \"-\" + md5hash.substring(20);\n};\n\n})();\n","created":"20141229142330769","creator":"Jim","modified":"20160426001500000","modifier":"Sukima","module-type":"macro","tags":"","type":"application/javascript"},"$:/plugins/dullroar/atomfeed/readme":{"title":"$:/plugins/dullroar/atomfeed/readme","text":"{{$:/plugins/dullroar/atomfeed/Feed-icon.svg}}\n\n~TiddlyWiki5 plugin to generate ATOM feed (http://www.ietf.org/rfc/rfc4287.txt).\n\nIt works in the browser (sort of) but its primary use case is for generating a feed for static sites\nusing something similar to the following when running ~TiddlyWiki under node.js\n\nOfficial source can be found at https://github.com/dullroar/TW5-atomfeed\n"},"$:/plugins/dullroar/atomfeed/tw-dombuilder.js":{"title":"$:/plugins/dullroar/atomfeed/tw-dombuilder.js","text":"/*\\\ntitle: $:/plugins/dullroar/atomfeed/tw-dombuilder.js\ntype: application/javascript\nmodule-type: utils\n\nDefines $tw.utils.DomBuilder and extends DomBuilder with Tiddly Wiki addons.\n\n\\*/\n\n/**\n * @module Atomfeed\n * @author Devin Weaver\n */\n/*jshint node: true, browser: true */\n/*global $tw: false */\n(function() {\n  /**\n   * @class DomBuilder\n   */\n  var DomBuilder = require('$:/plugins/dullroar/atomfeed/dombuilder');\n\n  /**\n   * Render a tiddler's text and construct a node tre for it.\n   *\n   * Will auto wrap the output in a `div` but will continue the chain so the\n   * wrapped div can be modified with `add()`, `text()`, and `attr()`.\n   *\n   * @method renderTiddler\n   * @param {String} title the tiddler title to render\n   * @return {DomBuilder} a wrapped DomBuilder with the rendered nodes within\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.renderTiddler = function renderTiddler(title) {\n    var widgetNode = $tw.wiki.makeWidget($tw.wiki.parseTiddler(title));\n    var container = new DomBuilder('div', this.document).toDOM();\n    widgetNode.render(container, null);\n    return this.add(container);\n  };\n\n  /**\n   * Render TiddlyWiki text and add it as a text node.\n   *\n   * @method renderText\n   * @param {String} text the tiddlywiki text to render\n   * @return {DomBuilder} a wrapped DomBuilder with the rendered nodes within\n   * @chainable\n   * @public\n   */\n  DomBuilder.prototype.renderText = function renderText(text) {\n    var rendered =\n      $tw.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', text);\n    return this.text(rendered);\n  };\n\n  $tw.utils.DomBuilder = DomBuilder;\n})();\n","type":"application/javascript","module-type":"utils"}}}